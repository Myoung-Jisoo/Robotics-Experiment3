
rosil3_week10_hw_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000466  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000004da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000880  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c0  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002db  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  0000189c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000413  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001df  00000000  00000000  00001da7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001f86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	72 c0       	rjmp	.+228    	; 0xea <__vector_1>
   6:	00 00       	nop
   8:	a8 c0       	rjmp	.+336    	; 0x15a <__vector_2>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	42 c0       	rjmp	.+132    	; 0xae <__vector_10>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	90 d0       	rcall	.+288    	; 0x1ca <main>
  aa:	db c1       	rjmp	.+950    	; 0x462 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_10>:

double top = 0.0;
unsigned int servo;

ISR(TIMER2_OVF_vect) // 10ms
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
	cli(); // 제어주기 내에서 이루어지는 것들이 우선이기 때문
  bc:	f8 94       	cli
	PORTA = 0x00; // 제어주기가 10ms가 맞는지 확인하기 위해 LED 켬
  be:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0x20; // 서보모터 OC1A 출력
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	88 bb       	out	0x18, r24	; 24
	
	// Control
	OCR1A = servo;
  c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <servo>
  c8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <servo+0x1>
  cc:	9b bd       	out	0x2b, r25	; 43
  ce:	8a bd       	out	0x2a, r24	; 42
	
	// Output
	PORTA = 0xff; // LED 끄기
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0x00; // 서보모터 OC1A 출력을 끔
  d4:	18 ba       	out	0x18, r1	; 24
	// 휴지기가 제어주기의 20%는 되어야 함
	TCNT2 = 255-156;
  d6:	83 e6       	ldi	r24, 0x63	; 99
  d8:	84 bd       	out	0x24, r24	; 36
	// TCNT2 값을 99로 초기화 함으로써 다시 10ms후 Overflow Intterupt가 발생하게 함
	sei(); // 다시 전역 인터럽트 활성화
  da:	78 94       	sei
}
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <__vector_1>:

ISR(INT0_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	0b b6       	in	r0, 0x3b	; 59
  f6:	0f 92       	push	r0
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	5f 93       	push	r21
 100:	6f 93       	push	r22
 102:	7f 93       	push	r23
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
	servo = top * (0.5 / 20.0); // = 3000
 110:	2d ec       	ldi	r18, 0xCD	; 205
 112:	3c ec       	ldi	r19, 0xCC	; 204
 114:	4c ec       	ldi	r20, 0xCC	; 204
 116:	5c e3       	ldi	r21, 0x3C	; 60
 118:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 120:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 124:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 128:	11 d1       	rcall	.+546    	; 0x34c <__mulsf3>
 12a:	7e d0       	rcall	.+252    	; 0x228 <__fixunssfsi>
 12c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <servo+0x1>
 130:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <servo>
	// 0.5ms가 되므로 0도
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0b be       	out	0x3b, r0	; 59
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_2>:

ISR(INT1_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	0b b6       	in	r0, 0x3b	; 59
 166:	0f 92       	push	r0
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	servo = top * (2.5 / 20.0); // = 5000
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	5e e3       	ldi	r21, 0x3E	; 62
 188:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 190:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 194:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 198:	d9 d0       	rcall	.+434    	; 0x34c <__mulsf3>
 19a:	46 d0       	rcall	.+140    	; 0x228 <__fixunssfsi>
 19c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <servo+0x1>
 1a0:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <servo>
	// 2.5ms가 되므로 180도
}
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0b be       	out	0x3b, r0	; 59
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <main>:

int main(void)
{
	/* Replace with your application code */
	// Init
	DDRB  = 0x20; // PB5 (OC1A)를 Output으로 설정
 1ca:	80 e2       	ldi	r24, 0x20	; 32
 1cc:	87 bb       	out	0x17, r24	; 23
	DDRA  = 0xff; // LED를 Output으로 설정
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	8a bb       	out	0x1a, r24	; 26
	DDRD  = 0x00; // switch0, switch1을 사용하기 위해 PD0와 PD1을 Input 설정
 1d2:	11 ba       	out	0x11, r1	; 17
	
	// Switch setting
	EIMSK = (1<<INT0) | (1<<INT1);	 // INT0와 INT1 활성화
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	89 bf       	out	0x39, r24	; 57
	EICRA = (1<<ISC01) | (1<<ISC11);
 1d8:	8a e0       	ldi	r24, 0x0A	; 10
 1da:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	// 둘 다 Falling edge 발생시 Interrupt가 활성화 되도록 설정
	
	// TIMER1 Setting
	TCCR1A	= (1<<COM1A1)|(1<<WGM11)|(0<<WGM10);
 1de:	82 e8       	ldi	r24, 0x82	; 130
 1e0:	8f bd       	out	0x2f, r24	; 47
	// Fast PWM (TOP=ICR1) / Clear OC1A on compare match 사용
	TCCR1B  = (1<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<< CS11)|(0<<CS10); // 분주비 8
 1e2:	8a e1       	ldi	r24, 0x1A	; 26
 1e4:	8e bd       	out	0x2e, r24	; 46
	TCCR1C	= 0x00; // Force Output Compare A, B, C를 다 0으로 설정
 1e6:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	// TIMER2 Setting
	TCCR2	= (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(0<<COM20)|(1<<CS22)|(0<<CS21)|(1<<CS20);
 1ea:	8d e6       	ldi	r24, 0x6D	; 109
 1ec:	85 bd       	out	0x25, r24	; 37
	// Fast PWM mode / Clear OC2 on compare match, set OC2 at BOTTOM / 분주비 1024
	TIMSK	= (1<<TOIE2);	// Timer/Counter2 Overflow Interrupt 활성화
 1ee:	80 e4       	ldi	r24, 0x40	; 64
 1f0:	87 bf       	out	0x37, r24	; 55
	TCNT2	= 255-156;  // = 99 // 정확하게 나누어 떨어지진 않음 (원래는 98.5번이 정확함)
 1f2:	83 e6       	ldi	r24, 0x63	; 99
 1f4:	84 bd       	out	0x24, r24	; 36

	// System Init
	ICR1	= 40000; // TOP값을 40000으로 설정해 서브모터의 주기를 20ms로 맞춰줌
 1f6:	80 e4       	ldi	r24, 0x40	; 64
 1f8:	9c e9       	ldi	r25, 0x9C	; 156
 1fa:	97 bd       	out	0x27, r25	; 39
 1fc:	86 bd       	out	0x26, r24	; 38
	top		= ICR1;
 1fe:	66 b5       	in	r22, 0x26	; 38
 200:	77 b5       	in	r23, 0x27	; 39
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	3c d0       	rcall	.+120    	; 0x280 <__floatunsisf>
 208:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 20c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 210:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 214:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	servo   = 40000.0 * (1.5/20.0); // = 1000, 서보모터의 첫시작 위치는 90도 (1.5ms)
 218:	88 eb       	ldi	r24, 0xB8	; 184
 21a:	9b e0       	ldi	r25, 0x0B	; 11
 21c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <servo+0x1>
 220:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <servo>
	
	sei();			// 전역 인터럽트 활성화
 224:	78 94       	sei
 226:	ff cf       	rjmp	.-2      	; 0x226 <main+0x5c>

00000228 <__fixunssfsi>:
 228:	70 d0       	rcall	.+224    	; 0x30a <__fp_splitA>
 22a:	88 f0       	brcs	.+34     	; 0x24e <__fixunssfsi+0x26>
 22c:	9f 57       	subi	r25, 0x7F	; 127
 22e:	90 f0       	brcs	.+36     	; 0x254 <__fixunssfsi+0x2c>
 230:	b9 2f       	mov	r27, r25
 232:	99 27       	eor	r25, r25
 234:	b7 51       	subi	r27, 0x17	; 23
 236:	a0 f0       	brcs	.+40     	; 0x260 <__fixunssfsi+0x38>
 238:	d1 f0       	breq	.+52     	; 0x26e <__fixunssfsi+0x46>
 23a:	66 0f       	add	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	88 1f       	adc	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	1a f0       	brmi	.+6      	; 0x24a <__fixunssfsi+0x22>
 244:	ba 95       	dec	r27
 246:	c9 f7       	brne	.-14     	; 0x23a <__fixunssfsi+0x12>
 248:	12 c0       	rjmp	.+36     	; 0x26e <__fixunssfsi+0x46>
 24a:	b1 30       	cpi	r27, 0x01	; 1
 24c:	81 f0       	breq	.+32     	; 0x26e <__fixunssfsi+0x46>
 24e:	77 d0       	rcall	.+238    	; 0x33e <__fp_zero>
 250:	b1 e0       	ldi	r27, 0x01	; 1
 252:	08 95       	ret
 254:	74 c0       	rjmp	.+232    	; 0x33e <__fp_zero>
 256:	67 2f       	mov	r22, r23
 258:	78 2f       	mov	r23, r24
 25a:	88 27       	eor	r24, r24
 25c:	b8 5f       	subi	r27, 0xF8	; 248
 25e:	39 f0       	breq	.+14     	; 0x26e <__fixunssfsi+0x46>
 260:	b9 3f       	cpi	r27, 0xF9	; 249
 262:	cc f3       	brlt	.-14     	; 0x256 <__fixunssfsi+0x2e>
 264:	86 95       	lsr	r24
 266:	77 95       	ror	r23
 268:	67 95       	ror	r22
 26a:	b3 95       	inc	r27
 26c:	d9 f7       	brne	.-10     	; 0x264 <__fixunssfsi+0x3c>
 26e:	3e f4       	brtc	.+14     	; 0x27e <__fixunssfsi+0x56>
 270:	90 95       	com	r25
 272:	80 95       	com	r24
 274:	70 95       	com	r23
 276:	61 95       	neg	r22
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	8f 4f       	sbci	r24, 0xFF	; 255
 27c:	9f 4f       	sbci	r25, 0xFF	; 255
 27e:	08 95       	ret

00000280 <__floatunsisf>:
 280:	e8 94       	clt
 282:	09 c0       	rjmp	.+18     	; 0x296 <__floatsisf+0x12>

00000284 <__floatsisf>:
 284:	97 fb       	bst	r25, 7
 286:	3e f4       	brtc	.+14     	; 0x296 <__floatsisf+0x12>
 288:	90 95       	com	r25
 28a:	80 95       	com	r24
 28c:	70 95       	com	r23
 28e:	61 95       	neg	r22
 290:	7f 4f       	sbci	r23, 0xFF	; 255
 292:	8f 4f       	sbci	r24, 0xFF	; 255
 294:	9f 4f       	sbci	r25, 0xFF	; 255
 296:	99 23       	and	r25, r25
 298:	a9 f0       	breq	.+42     	; 0x2c4 <__floatsisf+0x40>
 29a:	f9 2f       	mov	r31, r25
 29c:	96 e9       	ldi	r25, 0x96	; 150
 29e:	bb 27       	eor	r27, r27
 2a0:	93 95       	inc	r25
 2a2:	f6 95       	lsr	r31
 2a4:	87 95       	ror	r24
 2a6:	77 95       	ror	r23
 2a8:	67 95       	ror	r22
 2aa:	b7 95       	ror	r27
 2ac:	f1 11       	cpse	r31, r1
 2ae:	f8 cf       	rjmp	.-16     	; 0x2a0 <__floatsisf+0x1c>
 2b0:	fa f4       	brpl	.+62     	; 0x2f0 <__floatsisf+0x6c>
 2b2:	bb 0f       	add	r27, r27
 2b4:	11 f4       	brne	.+4      	; 0x2ba <__floatsisf+0x36>
 2b6:	60 ff       	sbrs	r22, 0
 2b8:	1b c0       	rjmp	.+54     	; 0x2f0 <__floatsisf+0x6c>
 2ba:	6f 5f       	subi	r22, 0xFF	; 255
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
 2be:	8f 4f       	sbci	r24, 0xFF	; 255
 2c0:	9f 4f       	sbci	r25, 0xFF	; 255
 2c2:	16 c0       	rjmp	.+44     	; 0x2f0 <__floatsisf+0x6c>
 2c4:	88 23       	and	r24, r24
 2c6:	11 f0       	breq	.+4      	; 0x2cc <__floatsisf+0x48>
 2c8:	96 e9       	ldi	r25, 0x96	; 150
 2ca:	11 c0       	rjmp	.+34     	; 0x2ee <__floatsisf+0x6a>
 2cc:	77 23       	and	r23, r23
 2ce:	21 f0       	breq	.+8      	; 0x2d8 <__floatsisf+0x54>
 2d0:	9e e8       	ldi	r25, 0x8E	; 142
 2d2:	87 2f       	mov	r24, r23
 2d4:	76 2f       	mov	r23, r22
 2d6:	05 c0       	rjmp	.+10     	; 0x2e2 <__floatsisf+0x5e>
 2d8:	66 23       	and	r22, r22
 2da:	71 f0       	breq	.+28     	; 0x2f8 <__floatsisf+0x74>
 2dc:	96 e8       	ldi	r25, 0x86	; 134
 2de:	86 2f       	mov	r24, r22
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	2a f0       	brmi	.+10     	; 0x2f0 <__floatsisf+0x6c>
 2e6:	9a 95       	dec	r25
 2e8:	66 0f       	add	r22, r22
 2ea:	77 1f       	adc	r23, r23
 2ec:	88 1f       	adc	r24, r24
 2ee:	da f7       	brpl	.-10     	; 0x2e6 <__floatsisf+0x62>
 2f0:	88 0f       	add	r24, r24
 2f2:	96 95       	lsr	r25
 2f4:	87 95       	ror	r24
 2f6:	97 f9       	bld	r25, 7
 2f8:	08 95       	ret

000002fa <__fp_split3>:
 2fa:	57 fd       	sbrc	r21, 7
 2fc:	90 58       	subi	r25, 0x80	; 128
 2fe:	44 0f       	add	r20, r20
 300:	55 1f       	adc	r21, r21
 302:	59 f0       	breq	.+22     	; 0x31a <__fp_splitA+0x10>
 304:	5f 3f       	cpi	r21, 0xFF	; 255
 306:	71 f0       	breq	.+28     	; 0x324 <__fp_splitA+0x1a>
 308:	47 95       	ror	r20

0000030a <__fp_splitA>:
 30a:	88 0f       	add	r24, r24
 30c:	97 fb       	bst	r25, 7
 30e:	99 1f       	adc	r25, r25
 310:	61 f0       	breq	.+24     	; 0x32a <__fp_splitA+0x20>
 312:	9f 3f       	cpi	r25, 0xFF	; 255
 314:	79 f0       	breq	.+30     	; 0x334 <__fp_splitA+0x2a>
 316:	87 95       	ror	r24
 318:	08 95       	ret
 31a:	12 16       	cp	r1, r18
 31c:	13 06       	cpc	r1, r19
 31e:	14 06       	cpc	r1, r20
 320:	55 1f       	adc	r21, r21
 322:	f2 cf       	rjmp	.-28     	; 0x308 <__fp_split3+0xe>
 324:	46 95       	lsr	r20
 326:	f1 df       	rcall	.-30     	; 0x30a <__fp_splitA>
 328:	08 c0       	rjmp	.+16     	; 0x33a <__fp_splitA+0x30>
 32a:	16 16       	cp	r1, r22
 32c:	17 06       	cpc	r1, r23
 32e:	18 06       	cpc	r1, r24
 330:	99 1f       	adc	r25, r25
 332:	f1 cf       	rjmp	.-30     	; 0x316 <__fp_splitA+0xc>
 334:	86 95       	lsr	r24
 336:	71 05       	cpc	r23, r1
 338:	61 05       	cpc	r22, r1
 33a:	08 94       	sec
 33c:	08 95       	ret

0000033e <__fp_zero>:
 33e:	e8 94       	clt

00000340 <__fp_szero>:
 340:	bb 27       	eor	r27, r27
 342:	66 27       	eor	r22, r22
 344:	77 27       	eor	r23, r23
 346:	cb 01       	movw	r24, r22
 348:	97 f9       	bld	r25, 7
 34a:	08 95       	ret

0000034c <__mulsf3>:
 34c:	0b d0       	rcall	.+22     	; 0x364 <__mulsf3x>
 34e:	78 c0       	rjmp	.+240    	; 0x440 <__fp_round>
 350:	69 d0       	rcall	.+210    	; 0x424 <__fp_pscA>
 352:	28 f0       	brcs	.+10     	; 0x35e <__mulsf3+0x12>
 354:	6e d0       	rcall	.+220    	; 0x432 <__fp_pscB>
 356:	18 f0       	brcs	.+6      	; 0x35e <__mulsf3+0x12>
 358:	95 23       	and	r25, r21
 35a:	09 f0       	breq	.+2      	; 0x35e <__mulsf3+0x12>
 35c:	5a c0       	rjmp	.+180    	; 0x412 <__fp_inf>
 35e:	5f c0       	rjmp	.+190    	; 0x41e <__fp_nan>
 360:	11 24       	eor	r1, r1
 362:	ee cf       	rjmp	.-36     	; 0x340 <__fp_szero>

00000364 <__mulsf3x>:
 364:	ca df       	rcall	.-108    	; 0x2fa <__fp_split3>
 366:	a0 f3       	brcs	.-24     	; 0x350 <__mulsf3+0x4>

00000368 <__mulsf3_pse>:
 368:	95 9f       	mul	r25, r21
 36a:	d1 f3       	breq	.-12     	; 0x360 <__mulsf3+0x14>
 36c:	95 0f       	add	r25, r21
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	55 1f       	adc	r21, r21
 372:	62 9f       	mul	r22, r18
 374:	f0 01       	movw	r30, r0
 376:	72 9f       	mul	r23, r18
 378:	bb 27       	eor	r27, r27
 37a:	f0 0d       	add	r31, r0
 37c:	b1 1d       	adc	r27, r1
 37e:	63 9f       	mul	r22, r19
 380:	aa 27       	eor	r26, r26
 382:	f0 0d       	add	r31, r0
 384:	b1 1d       	adc	r27, r1
 386:	aa 1f       	adc	r26, r26
 388:	64 9f       	mul	r22, r20
 38a:	66 27       	eor	r22, r22
 38c:	b0 0d       	add	r27, r0
 38e:	a1 1d       	adc	r26, r1
 390:	66 1f       	adc	r22, r22
 392:	82 9f       	mul	r24, r18
 394:	22 27       	eor	r18, r18
 396:	b0 0d       	add	r27, r0
 398:	a1 1d       	adc	r26, r1
 39a:	62 1f       	adc	r22, r18
 39c:	73 9f       	mul	r23, r19
 39e:	b0 0d       	add	r27, r0
 3a0:	a1 1d       	adc	r26, r1
 3a2:	62 1f       	adc	r22, r18
 3a4:	83 9f       	mul	r24, r19
 3a6:	a0 0d       	add	r26, r0
 3a8:	61 1d       	adc	r22, r1
 3aa:	22 1f       	adc	r18, r18
 3ac:	74 9f       	mul	r23, r20
 3ae:	33 27       	eor	r19, r19
 3b0:	a0 0d       	add	r26, r0
 3b2:	61 1d       	adc	r22, r1
 3b4:	23 1f       	adc	r18, r19
 3b6:	84 9f       	mul	r24, r20
 3b8:	60 0d       	add	r22, r0
 3ba:	21 1d       	adc	r18, r1
 3bc:	82 2f       	mov	r24, r18
 3be:	76 2f       	mov	r23, r22
 3c0:	6a 2f       	mov	r22, r26
 3c2:	11 24       	eor	r1, r1
 3c4:	9f 57       	subi	r25, 0x7F	; 127
 3c6:	50 40       	sbci	r21, 0x00	; 0
 3c8:	8a f0       	brmi	.+34     	; 0x3ec <__mulsf3_pse+0x84>
 3ca:	e1 f0       	breq	.+56     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3cc:	88 23       	and	r24, r24
 3ce:	4a f0       	brmi	.+18     	; 0x3e2 <__mulsf3_pse+0x7a>
 3d0:	ee 0f       	add	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	bb 1f       	adc	r27, r27
 3d6:	66 1f       	adc	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	88 1f       	adc	r24, r24
 3dc:	91 50       	subi	r25, 0x01	; 1
 3de:	50 40       	sbci	r21, 0x00	; 0
 3e0:	a9 f7       	brne	.-22     	; 0x3cc <__mulsf3_pse+0x64>
 3e2:	9e 3f       	cpi	r25, 0xFE	; 254
 3e4:	51 05       	cpc	r21, r1
 3e6:	70 f0       	brcs	.+28     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3e8:	14 c0       	rjmp	.+40     	; 0x412 <__fp_inf>
 3ea:	aa cf       	rjmp	.-172    	; 0x340 <__fp_szero>
 3ec:	5f 3f       	cpi	r21, 0xFF	; 255
 3ee:	ec f3       	brlt	.-6      	; 0x3ea <__mulsf3_pse+0x82>
 3f0:	98 3e       	cpi	r25, 0xE8	; 232
 3f2:	dc f3       	brlt	.-10     	; 0x3ea <__mulsf3_pse+0x82>
 3f4:	86 95       	lsr	r24
 3f6:	77 95       	ror	r23
 3f8:	67 95       	ror	r22
 3fa:	b7 95       	ror	r27
 3fc:	f7 95       	ror	r31
 3fe:	e7 95       	ror	r30
 400:	9f 5f       	subi	r25, 0xFF	; 255
 402:	c1 f7       	brne	.-16     	; 0x3f4 <__mulsf3_pse+0x8c>
 404:	fe 2b       	or	r31, r30
 406:	88 0f       	add	r24, r24
 408:	91 1d       	adc	r25, r1
 40a:	96 95       	lsr	r25
 40c:	87 95       	ror	r24
 40e:	97 f9       	bld	r25, 7
 410:	08 95       	ret

00000412 <__fp_inf>:
 412:	97 f9       	bld	r25, 7
 414:	9f 67       	ori	r25, 0x7F	; 127
 416:	80 e8       	ldi	r24, 0x80	; 128
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	08 95       	ret

0000041e <__fp_nan>:
 41e:	9f ef       	ldi	r25, 0xFF	; 255
 420:	80 ec       	ldi	r24, 0xC0	; 192
 422:	08 95       	ret

00000424 <__fp_pscA>:
 424:	00 24       	eor	r0, r0
 426:	0a 94       	dec	r0
 428:	16 16       	cp	r1, r22
 42a:	17 06       	cpc	r1, r23
 42c:	18 06       	cpc	r1, r24
 42e:	09 06       	cpc	r0, r25
 430:	08 95       	ret

00000432 <__fp_pscB>:
 432:	00 24       	eor	r0, r0
 434:	0a 94       	dec	r0
 436:	12 16       	cp	r1, r18
 438:	13 06       	cpc	r1, r19
 43a:	14 06       	cpc	r1, r20
 43c:	05 06       	cpc	r0, r21
 43e:	08 95       	ret

00000440 <__fp_round>:
 440:	09 2e       	mov	r0, r25
 442:	03 94       	inc	r0
 444:	00 0c       	add	r0, r0
 446:	11 f4       	brne	.+4      	; 0x44c <__fp_round+0xc>
 448:	88 23       	and	r24, r24
 44a:	52 f0       	brmi	.+20     	; 0x460 <__fp_round+0x20>
 44c:	bb 0f       	add	r27, r27
 44e:	40 f4       	brcc	.+16     	; 0x460 <__fp_round+0x20>
 450:	bf 2b       	or	r27, r31
 452:	11 f4       	brne	.+4      	; 0x458 <__fp_round+0x18>
 454:	60 ff       	sbrs	r22, 0
 456:	04 c0       	rjmp	.+8      	; 0x460 <__fp_round+0x20>
 458:	6f 5f       	subi	r22, 0xFF	; 255
 45a:	7f 4f       	sbci	r23, 0xFF	; 255
 45c:	8f 4f       	sbci	r24, 0xFF	; 255
 45e:	9f 4f       	sbci	r25, 0xFF	; 255
 460:	08 95       	ret

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
