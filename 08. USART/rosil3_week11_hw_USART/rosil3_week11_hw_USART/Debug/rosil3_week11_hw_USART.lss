
rosil3_week11_hw_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e5  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000890  00000000  00000000  00000c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000340  00000000  00000000  00001521  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001864  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044d  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000184  00000000  00000000  00001d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001e99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	35 d0       	rcall	.+106    	; 0x104 <main>
  9a:	8d c0       	rjmp	.+282    	; 0x1b6 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <USART1_Transmit>:
#include <avr/delay.h>

void USART1_Transmit( unsigned char data ) // USART1 송신
{
	// UDR 값이 비었는지 확인(비어있으면 대기)
	while ( !( UCSR1A & (1<<UDRE)) );
  9e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  a2:	95 ff       	sbrs	r25, 5
  a4:	fc cf       	rjmp	.-8      	; 0x9e <USART1_Transmit>
	// buffer안에 데이터가 들어오면 데이터를 송신
	UDR1 = data; // UDR1에 들어온 data를 저장한다.
  a6:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  aa:	08 95       	ret

000000ac <USART1_TransNum>:
}

void USART1_TransNum(int num) // int형 data를 uart1으로 전송해 출력
{
  ac:	ef 92       	push	r14
  ae:	ff 92       	push	r15
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	ec 01       	movw	r28, r24
	int j;
	if(num < 0) // data가 음수라면
  ba:	99 23       	and	r25, r25
  bc:	2c f4       	brge	.+10     	; 0xc8 <USART1_TransNum+0x1c>
	{
		USART1_Transmit('-'); // -를 출력해주고
  be:	8d e2       	ldi	r24, 0x2D	; 45
  c0:	ee df       	rcall	.-36     	; 0x9e <USART1_Transmit>
		num = -num; // 절댓값 처리해준다.
  c2:	d1 95       	neg	r29
  c4:	c1 95       	neg	r28
  c6:	d1 09       	sbc	r29, r1
	// buffer안에 데이터가 들어오면 데이터를 송신
	UDR1 = data; // UDR1에 들어온 data를 저장한다.
}

void USART1_TransNum(int num) // int형 data를 uart1으로 전송해 출력
{
  c8:	00 e1       	ldi	r16, 0x10	; 16
  ca:	17 e2       	ldi	r17, 0x27	; 39
  cc:	0f c0       	rjmp	.+30     	; 0xec <USART1_TransNum+0x40>
		num = -num; // 절댓값 처리해준다.
	}
	
	for(j = 10000 ; j > 0; j /= 10) // 10000의 자리수터 천천히 출력
	{
		USART1_Transmit((num/j) + 48);
  ce:	ce 01       	movw	r24, r28
  d0:	b8 01       	movw	r22, r16
  d2:	4a d0       	rcall	.+148    	; 0x168 <__divmodhi4>
  d4:	e8 2e       	mov	r14, r24
  d6:	f9 2e       	mov	r15, r25
  d8:	80 e3       	ldi	r24, 0x30	; 48
  da:	86 0f       	add	r24, r22
  dc:	e0 df       	rcall	.-64     	; 0x9e <USART1_Transmit>
		// 아스키 코드로 '0'은 48이므로 48을 더해 송신한다.
		num %= j; // 첫번째 자리를 제외한다. (예. 12345면 2345로 만듦)
  de:	ce 2d       	mov	r28, r14
  e0:	df 2d       	mov	r29, r15
	{
		USART1_Transmit('-'); // -를 출력해주고
		num = -num; // 절댓값 처리해준다.
	}
	
	for(j = 10000 ; j > 0; j /= 10) // 10000의 자리수터 천천히 출력
  e2:	c8 01       	movw	r24, r16
  e4:	6a e0       	ldi	r22, 0x0A	; 10
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	3f d0       	rcall	.+126    	; 0x168 <__divmodhi4>
  ea:	8b 01       	movw	r16, r22
  ec:	10 16       	cp	r1, r16
  ee:	11 06       	cpc	r1, r17
	{
		USART1_Transmit((num/j) + 48);
		// 아스키 코드로 '0'은 48이므로 48을 더해 송신한다.
		num %= j; // 첫번째 자리를 제외한다. (예. 12345면 2345로 만듦)
	}
	USART1_Transmit(' '); // 한 칸 띄어쓰기
  f0:	74 f3       	brlt	.-36     	; 0xce <USART1_TransNum+0x22>
  f2:	80 e2       	ldi	r24, 0x20	; 32
  f4:	d4 df       	rcall	.-88     	; 0x9e <USART1_Transmit>
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	ff 90       	pop	r15
 100:	ef 90       	pop	r14
 102:	08 95       	ret

00000104 <main>:
	/* Replace with your application code */
	unsigned int a_data;
	
	// Init
	// USART1
	DDRD  = 0x08;
 104:	88 e0       	ldi	r24, 0x08	; 8
 106:	81 bb       	out	0x11, r24	; 17
	// PD2(RXD1) = input / PD3(TXD1) = output
	
	// USART1 setting
	UCSR1A = 0x00;
 108:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B = 0x18; 	// RX, TX 활성화
 10c:	88 e1       	ldi	r24, 0x18	; 24
 10e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = 0x06;  // Character Size 8bit로 설정
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1L = 103;   // 9600BPS
 118:	87 e6       	ldi	r24, 0x67	; 103
 11a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>

	// Global Intrrupt
	// sei();			// 전역 인터럽트 활성화
	
	a_data = 12345;
	USART1_TransNum(a_data);
 11e:	89 e3       	ldi	r24, 0x39	; 57
 120:	90 e3       	ldi	r25, 0x30	; 48
 122:	c4 df       	rcall	.-120    	; 0xac <USART1_TransNum>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	83 ed       	ldi	r24, 0xD3	; 211
 128:	90 e3       	ldi	r25, 0x30	; 48
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0x26>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x30>
 134:	00 00       	nop
	_delay_ms(1000);
	// 12345 송신
	
	a_data = -516;
	USART1_TransNum(a_data);
 136:	8c ef       	ldi	r24, 0xFC	; 252
 138:	9d ef       	ldi	r25, 0xFD	; 253
 13a:	b8 df       	rcall	.-144    	; 0xac <USART1_TransNum>
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	83 ed       	ldi	r24, 0xD3	; 211
 140:	90 e3       	ldi	r25, 0x30	; 48
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x3e>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x48>
 14c:	00 00       	nop
	_delay_ms(1000);
	// -516 송신
	
	a_data = -2;
	USART1_TransNum(a_data);
 14e:	8e ef       	ldi	r24, 0xFE	; 254
 150:	9f ef       	ldi	r25, 0xFF	; 255
 152:	ac df       	rcall	.-168    	; 0xac <USART1_TransNum>
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	83 ed       	ldi	r24, 0xD3	; 211
 158:	90 e3       	ldi	r25, 0x30	; 48
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0x56>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x60>
 164:	00 00       	nop
 166:	ff cf       	rjmp	.-2      	; 0x166 <main+0x62>

00000168 <__divmodhi4>:
 168:	97 fb       	bst	r25, 7
 16a:	07 2e       	mov	r0, r23
 16c:	16 f4       	brtc	.+4      	; 0x172 <__divmodhi4+0xa>
 16e:	00 94       	com	r0
 170:	06 d0       	rcall	.+12     	; 0x17e <__divmodhi4_neg1>
 172:	77 fd       	sbrc	r23, 7
 174:	08 d0       	rcall	.+16     	; 0x186 <__divmodhi4_neg2>
 176:	0b d0       	rcall	.+22     	; 0x18e <__udivmodhi4>
 178:	07 fc       	sbrc	r0, 7
 17a:	05 d0       	rcall	.+10     	; 0x186 <__divmodhi4_neg2>
 17c:	3e f4       	brtc	.+14     	; 0x18c <__divmodhi4_exit>

0000017e <__divmodhi4_neg1>:
 17e:	90 95       	com	r25
 180:	81 95       	neg	r24
 182:	9f 4f       	sbci	r25, 0xFF	; 255
 184:	08 95       	ret

00000186 <__divmodhi4_neg2>:
 186:	70 95       	com	r23
 188:	61 95       	neg	r22
 18a:	7f 4f       	sbci	r23, 0xFF	; 255

0000018c <__divmodhi4_exit>:
 18c:	08 95       	ret

0000018e <__udivmodhi4>:
 18e:	aa 1b       	sub	r26, r26
 190:	bb 1b       	sub	r27, r27
 192:	51 e1       	ldi	r21, 0x11	; 17
 194:	07 c0       	rjmp	.+14     	; 0x1a4 <__udivmodhi4_ep>

00000196 <__udivmodhi4_loop>:
 196:	aa 1f       	adc	r26, r26
 198:	bb 1f       	adc	r27, r27
 19a:	a6 17       	cp	r26, r22
 19c:	b7 07       	cpc	r27, r23
 19e:	10 f0       	brcs	.+4      	; 0x1a4 <__udivmodhi4_ep>
 1a0:	a6 1b       	sub	r26, r22
 1a2:	b7 0b       	sbc	r27, r23

000001a4 <__udivmodhi4_ep>:
 1a4:	88 1f       	adc	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	5a 95       	dec	r21
 1aa:	a9 f7       	brne	.-22     	; 0x196 <__udivmodhi4_loop>
 1ac:	80 95       	com	r24
 1ae:	90 95       	com	r25
 1b0:	bc 01       	movw	r22, r24
 1b2:	cd 01       	movw	r24, r26
 1b4:	08 95       	ret

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
