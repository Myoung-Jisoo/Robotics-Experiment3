
rosil3_hw09_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  0000032e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a15  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086b  00000000  00000000  00000e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000407  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043f  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022a  00000000  00000000  00001fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002201  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	b8 c0       	rjmp	.+368    	; 0x19a <__vector_10>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 30       	cpi	r26, 0x0A	; 10
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	32 d0       	rcall	.+100    	; 0x10e <main>
  aa:	05 c1       	rjmp	.+522    	; 0x2b6 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <set_GPIO>:
void USART1_TransNum(int num); // int형 data를 uart1으로 전송해 출력

void set_GPIO(void)
{
	// ADC 0~3 INPUT
	cbi(DDRF, 0);
  ae:	e1 e6       	ldi	r30, 0x61	; 97
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	80 83       	st	Z, r24
	cbi(DDRF, 1);
  b8:	80 81       	ld	r24, Z
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	80 83       	st	Z, r24
	cbi(DDRF, 2);
  be:	80 81       	ld	r24, Z
  c0:	8b 7f       	andi	r24, 0xFB	; 251
  c2:	80 83       	st	Z, r24
	cbi(DDRF, 3);
  c4:	80 81       	ld	r24, Z
  c6:	87 7f       	andi	r24, 0xF7	; 247
  c8:	80 83       	st	Z, r24
	
	cbi(DDRD, 2); // USART1 RXD1 INPUT
  ca:	81 b3       	in	r24, 0x11	; 17
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	81 bb       	out	0x11, r24	; 17
	sbi(DDRD, 3); // USART1 TXD1 OUTPUT
  d0:	81 b3       	in	r24, 0x11	; 17
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	81 bb       	out	0x11, r24	; 17
	
	cbi(DDRB, 7); // OC2 OUTPUT
  d6:	87 b3       	in	r24, 0x17	; 23
  d8:	8f 77       	andi	r24, 0x7F	; 127
  da:	87 bb       	out	0x17, r24	; 23
  dc:	08 95       	ret

000000de <set_USART1>:
}

void set_USART1(void) // USART1 Register 설정
{
	UCSR1A = 0x00;
  de:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B = 0x18;    // RX, TX 활성화
  e2:	88 e1       	ldi	r24, 0x18	; 24
  e4:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = 0x06;  // Character Size 8bit로 설정
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1L = 8;      // 115200bps
  ee:	88 e0       	ldi	r24, 0x08	; 8
  f0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  f4:	08 95       	ret

000000f6 <set_TIMER2>:
}

void set_TIMER2(void) // Timer2 Setting
{
	TCCR2   = (1<<WGM20)|(1<<WGM21)|(1<<COM21)|(0<<COM20)|(1<<CS22)|(0<<CS21)|(1<<CS20);
  f6:	8d e6       	ldi	r24, 0x6D	; 109
  f8:	85 bd       	out	0x25, r24	; 37
	// Fast PWM mode / Clear OC2 on compare match, set OC2 at BOTTOM / 분주비 1024
	TIMSK   = (1<<TOIE2);   // Timer/Counter2 Overflow Interrupt 활성화
  fa:	80 e4       	ldi	r24, 0x40	; 64
  fc:	87 bf       	out	0x37, r24	; 55
	TCNT2   = 255-156;  // = 99 // 정확하게 나누어 떨어지진 않음 (원래는 98.5번이 정확함)
  fe:	83 e6       	ldi	r24, 0x63	; 99
 100:	84 bd       	out	0x24, r24	; 36
 102:	08 95       	ret

00000104 <set_ADC>:
}

void set_ADC(void)
{
	ADMUX   = (0<<REFS1)|(1<<REFS0)|(0<<ADLAR);
 104:	80 e4       	ldi	r24, 0x40	; 64
 106:	87 b9       	out	0x07, r24	; 7
	// AVCC with external capacitor at AREF pin, ADC Left Adjust Result
	ADCSRA   = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 108:	87 e8       	ldi	r24, 0x87	; 135
 10a:	86 b9       	out	0x06, r24	; 6
 10c:	08 95       	ret

0000010e <main>:
	sei(); // 다시 전역 인터럽트 활성화
}

int main(void)
{
	set_GPIO();
 10e:	cf df       	rcall	.-98     	; 0xae <set_GPIO>
	set_USART1();
 110:	e6 df       	rcall	.-52     	; 0xde <set_USART1>
	set_TIMER2();
 112:	f1 df       	rcall	.-30     	; 0xf6 <set_TIMER2>
 114:	f7 df       	rcall	.-18     	; 0x104 <set_ADC>
	set_ADC();
 116:	78 94       	sei
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0xa>

0000011a <get_adc>:
	sei();   // 전역 인터럽트 활성화
 11a:	97 b1       	in	r25, 0x07	; 7
 11c:	90 7e       	andi	r25, 0xE0	; 224
	while (1);
}

unsigned int get_adc(int id) // MUX값을 update하기 위한 함수
{
	ADMUX = (ADMUX & 0b11100000) | id;
 11e:	89 2b       	or	r24, r25
 120:	87 b9       	out	0x07, r24	; 7
	// 상위 3bit의 register 설정은 유지해주면서
	// MUX 값을 id와 'or 연산'함으로써 update
	
	cbi(ADCSRA, ADIF); // ADIF를 0으로 만듦, ADC Interrupt Flag를 Disable
 122:	86 b1       	in	r24, 0x06	; 6
 124:	8f 7e       	andi	r24, 0xEF	; 239
 126:	86 b9       	out	0x06, r24	; 6
	sbi(ADCSRA, ADSC); // ADC Conversion 시작
 128:	86 b1       	in	r24, 0x06	; 6
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	86 b9       	out	0x06, r24	; 6
	
	while(!((ADCSRA)&(1<<ADIF))); // 대략 25pulse 가 걸림
 12e:	34 9b       	sbis	0x06, 4	; 6
 130:	fe cf       	rjmp	.-4      	; 0x12e <get_adc+0x14>
	return ADC; // ADC는 10bit
 132:	84 b1       	in	r24, 0x04	; 4
 134:	95 b1       	in	r25, 0x05	; 5
}
 136:	08 95       	ret

00000138 <USART1_Transmit>:

void USART1_Transmit( unsigned char data ) // USART1 송신
{
	// UDR 값이 비었는지 확인(비어있으면 대기)
	while ( !( UCSR1A & (1<<UDRE)) );
 138:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 13c:	95 ff       	sbrs	r25, 5
 13e:	fc cf       	rjmp	.-8      	; 0x138 <USART1_Transmit>
	// buffer안에 데이터가 들어오면 데이터를 송신
	UDR1 = data; // UDR1에 들어온 data를 저장한다.
 140:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 144:	08 95       	ret

00000146 <USART1_TransNum>:
}

void USART1_TransNum(int num) // int형 data를 uart1으로 전송해 출력
{
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	ec 01       	movw	r28, r24
	int j;
	if(num < 0) // data가 음수라면
 154:	99 23       	and	r25, r25
 156:	2c f4       	brge	.+10     	; 0x162 <USART1_TransNum+0x1c>
	{
		USART1_Transmit('-'); // -를 출력해주고
 158:	8d e2       	ldi	r24, 0x2D	; 45
 15a:	ee df       	rcall	.-36     	; 0x138 <USART1_Transmit>
		num = -num; // 절댓값 처리해준다.
 15c:	d1 95       	neg	r29
 15e:	c1 95       	neg	r28
 160:	d1 09       	sbc	r29, r1
	// buffer안에 데이터가 들어오면 데이터를 송신
	UDR1 = data; // UDR1에 들어온 data를 저장한다.
}

void USART1_TransNum(int num) // int형 data를 uart1으로 전송해 출력
{
 162:	08 ee       	ldi	r16, 0xE8	; 232
 164:	13 e0       	ldi	r17, 0x03	; 3
 166:	0f c0       	rjmp	.+30     	; 0x186 <USART1_TransNum+0x40>
		num = -num; // 절댓값 처리해준다.
	}
	
	for(j = 1000 ; j > 0; j /= 10) // 10000의 자리수터 천천히 출력
	{
		USART1_Transmit((num/j) + 48);
 168:	ce 01       	movw	r24, r28
 16a:	b8 01       	movw	r22, r16
 16c:	7d d0       	rcall	.+250    	; 0x268 <__divmodhi4>
 16e:	e8 2e       	mov	r14, r24
 170:	f9 2e       	mov	r15, r25
 172:	80 e3       	ldi	r24, 0x30	; 48
 174:	86 0f       	add	r24, r22
 176:	e0 df       	rcall	.-64     	; 0x138 <USART1_Transmit>
		// 아스키 코드로 '0'은 48이므로 48을 더해 송신한다.
		num %= j; // 첫번째 자리를 제외한다. (예. 12345면 2345로 만듦)
 178:	ce 2d       	mov	r28, r14
 17a:	df 2d       	mov	r29, r15
	{
		USART1_Transmit('-'); // -를 출력해주고
		num = -num; // 절댓값 처리해준다.
	}
	
	for(j = 1000 ; j > 0; j /= 10) // 10000의 자리수터 천천히 출력
 17c:	c8 01       	movw	r24, r16
 17e:	6a e0       	ldi	r22, 0x0A	; 10
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	72 d0       	rcall	.+228    	; 0x268 <__divmodhi4>
 184:	8b 01       	movw	r16, r22
 186:	10 16       	cp	r1, r16
 188:	11 06       	cpc	r1, r17
 18a:	74 f3       	brlt	.-36     	; 0x168 <USART1_TransNum+0x22>
	{
		USART1_Transmit((num/j) + 48);
		// 아스키 코드로 '0'은 48이므로 48을 더해 송신한다.
		num %= j; // 첫번째 자리를 제외한다. (예. 12345면 2345로 만듦)
	}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	ff 90       	pop	r15
 196:	ef 90       	pop	r14
 198:	08 95       	ret

0000019a <__vector_10>:
	ADCSRA   = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
	// ADC Enable / ADC prescaler Select bit는 128로 설정
}

ISR(TIMER2_OVF_vect) // 10ms
{
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	0b b6       	in	r0, 0x3b	; 59
 1a6:	0f 92       	push	r0
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	
	cli(); // 제어주기 내에서 이루어지는 것들이 우선이기 때문
 1c4:	f8 94       	cli
	// get Sensor
	for(int i=0;i<4;i++) adc[i] = get_adc(i); // 0~3번까지의 ADC값을 받아온다.
 1c6:	c0 e0       	ldi	r28, 0x00	; 0
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
 1ca:	0a c0       	rjmp	.+20     	; 0x1e0 <__vector_10+0x46>
 1cc:	ce 01       	movw	r24, r28
 1ce:	a5 df       	rcall	.-182    	; 0x11a <get_adc>
 1d0:	fe 01       	movw	r30, r28
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	ee 5f       	subi	r30, 0xFE	; 254
 1d8:	fe 4f       	sbci	r31, 0xFE	; 254
 1da:	91 83       	std	Z+1, r25	; 0x01
 1dc:	80 83       	st	Z, r24
 1de:	21 96       	adiw	r28, 0x01	; 1
 1e0:	c4 30       	cpi	r28, 0x04	; 4
 1e2:	d1 05       	cpc	r29, r1
 1e4:	9c f3       	brlt	.-26     	; 0x1cc <__vector_10+0x32>
	
	if(cnt > 10) // 100ms
 1e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ee:	0b 97       	sbiw	r24, 0x0b	; 11
 1f0:	68 f4       	brcc	.+26     	; 0x20c <__vector_10+0x72>
 1f2:	19 c0       	rjmp	.+50     	; 0x226 <__vector_10+0x8c>
	{
		for(int i=0;i<4;i++) {
			USART1_TransNum(adc[i]);
 1f4:	fe 01       	movw	r30, r28
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	ee 5f       	subi	r30, 0xFE	; 254
 1fc:	fe 4f       	sbci	r31, 0xFE	; 254
 1fe:	80 81       	ld	r24, Z
 200:	91 81       	ldd	r25, Z+1	; 0x01
 202:	a1 df       	rcall	.-190    	; 0x146 <USART1_TransNum>
			USART1_Transmit(' ');
 204:	80 e2       	ldi	r24, 0x20	; 32
 206:	98 df       	rcall	.-208    	; 0x138 <USART1_Transmit>
 208:	21 96       	adiw	r28, 0x01	; 1
	// get Sensor
	for(int i=0;i<4;i++) adc[i] = get_adc(i); // 0~3번까지의 ADC값을 받아온다.
	
	if(cnt > 10) // 100ms
	{
		for(int i=0;i<4;i++) {
 20a:	02 c0       	rjmp	.+4      	; 0x210 <__vector_10+0x76>
 20c:	c0 e0       	ldi	r28, 0x00	; 0
 20e:	d0 e0       	ldi	r29, 0x00	; 0
 210:	c4 30       	cpi	r28, 0x04	; 4
 212:	d1 05       	cpc	r29, r1
 214:	7c f3       	brlt	.-34     	; 0x1f4 <__vector_10+0x5a>
			USART1_TransNum(adc[i]);
			USART1_Transmit(' ');
		} // ADC값을 송신
		USART1_Transmit('\n');
 216:	8a e0       	ldi	r24, 0x0A	; 10
 218:	8f df       	rcall	.-226    	; 0x138 <USART1_Transmit>
		USART1_Transmit('\r');
 21a:	8d e0       	ldi	r24, 0x0D	; 13
 21c:	8d df       	rcall	.-230    	; 0x138 <USART1_Transmit>
 21e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
		cnt=0;
 222:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 226:	83 e6       	ldi	r24, 0x63	; 99
	//} // ADC값을 송신
	//USART1_TransNum(adc[3]);
	//USART1_Transmit(0x0d);
	
	// 휴지기가 제어주기의 20%는 되어야 함
	TCNT2 = 255-156;
 228:	84 bd       	out	0x24, r24	; 36
 22a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
	// TCNT2 값을 99로 초기화 함으로써 다시 10ms후 Overflow Intterupt가 발생하게 함
	
	cnt++;
 22e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 238:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 23c:	78 94       	sei
	sei(); // 다시 전역 인터럽트 활성화
 23e:	ff 91       	pop	r31
}
 240:	ef 91       	pop	r30
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0b be       	out	0x3b, r0	; 59
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <__divmodhi4>:
 268:	97 fb       	bst	r25, 7
 26a:	07 2e       	mov	r0, r23
 26c:	16 f4       	brtc	.+4      	; 0x272 <__divmodhi4+0xa>
 26e:	00 94       	com	r0
 270:	06 d0       	rcall	.+12     	; 0x27e <__divmodhi4_neg1>
 272:	77 fd       	sbrc	r23, 7
 274:	08 d0       	rcall	.+16     	; 0x286 <__divmodhi4_neg2>
 276:	0b d0       	rcall	.+22     	; 0x28e <__udivmodhi4>
 278:	07 fc       	sbrc	r0, 7
 27a:	05 d0       	rcall	.+10     	; 0x286 <__divmodhi4_neg2>
 27c:	3e f4       	brtc	.+14     	; 0x28c <__divmodhi4_exit>

0000027e <__divmodhi4_neg1>:
 27e:	90 95       	com	r25
 280:	81 95       	neg	r24
 282:	9f 4f       	sbci	r25, 0xFF	; 255
 284:	08 95       	ret

00000286 <__divmodhi4_neg2>:
 286:	70 95       	com	r23
 288:	61 95       	neg	r22
 28a:	7f 4f       	sbci	r23, 0xFF	; 255

0000028c <__divmodhi4_exit>:
 28c:	08 95       	ret

0000028e <__udivmodhi4>:
 28e:	aa 1b       	sub	r26, r26
 290:	bb 1b       	sub	r27, r27
 292:	51 e1       	ldi	r21, 0x11	; 17
 294:	07 c0       	rjmp	.+14     	; 0x2a4 <__udivmodhi4_ep>

00000296 <__udivmodhi4_loop>:
 296:	aa 1f       	adc	r26, r26
 298:	bb 1f       	adc	r27, r27
 29a:	a6 17       	cp	r26, r22
 29c:	b7 07       	cpc	r27, r23
 29e:	10 f0       	brcs	.+4      	; 0x2a4 <__udivmodhi4_ep>
 2a0:	a6 1b       	sub	r26, r22
 2a2:	b7 0b       	sbc	r27, r23

000002a4 <__udivmodhi4_ep>:
 2a4:	88 1f       	adc	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	5a 95       	dec	r21
 2aa:	a9 f7       	brne	.-22     	; 0x296 <__udivmodhi4_loop>
 2ac:	80 95       	com	r24
 2ae:	90 95       	com	r25
 2b0:	bc 01       	movw	r22, r24
 2b2:	cd 01       	movw	r24, r26
 2b4:	08 95       	ret

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
